%Code for Experiment 2 and 3
%
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 02-May-2020 15:32:10
%
% This script assumes these variables are defined:
%
%   cancerInputs - input data.
%   cancerTargets - target data.
[inputs,targets] = cancer_dataset;

x = inputs;
t = targets;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'traingd';  % Scaled conjugate gradient backpropagation.



% Create a Pattern Recognition Network
% change hidden layer size to 2, 8 and 32 
hiddenLayerSize = 32;
net = patternnet(hiddenLayerSize, trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
% Change maximum epochs below for node/epoch combination
net.trainParam.epochs = 32;


% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
%net.performfcn = 'crossentropy';  % Cross-Entropy
ensemblelist = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25];

for r = 1:length(ensemblelist)


    % change for 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25
    % NB run all  ensemblesizes before uncommenting plot at Line 306
    ensemblesize = ensemblelist(r); 
    ErrorMatrix = [];
    ensemblePercentErrors = [];
    clfAccMatrixSize = ensemblesize * 30;
    clfAccMatrix = zeros(1,clfAccMatrixSize);
    clfAccMatrixInd = 1;
    clfAvg = [];
    a = 1;
    ensembleAccVector = zeros(1,30);
    

    %for graph plot variables initilisations
    %
    if ensemblesize == 3

        single3Acc = [];
        ensemble3Acc = [];


    elseif ensemblesize == 5

        single5Acc = [];    
        ensemble5Acc = [];

    elseif ensemblesize == 7

        single7Acc = [];    
        ensemble7Acc = [];

    elseif ensemblesize == 9

        single9Acc = [];    
        ensemble9Acc = [];

    elseif ensemblesize == 11

        single11Acc = [];    
        ensemble11Acc = [];

    elseif ensemblesize == 13

        single13Acc = [];    
        ensemble13Acc = [];

    elseif ensemblesize == 15

        single15Acc = [];    
        ensemble15Acc = [];

    elseif ensemblesize == 17

        single17Acc = [];    
        ensemble17Acc = [];

    elseif ensemblesize == 19

        single19Acc = [];    
        ensemble19Acc = [];

    elseif ensemblesize == 21

        single21Acc = [];    
        ensemble21Acc = [];

    elseif ensemblesize == 23

        single23Acc = [];    
        ensemble23Acc = [];

    elseif ensemblesize == 25

        single25Acc = [];    
        ensemble25Acc = [];

    end

    %


    while a < 31

        % Setup Division of Data for Training, Validation, Testing
        % For a list of all data division functions type: help nndivision
        net.divideFcn = 'dividerand';  % Divide data randomly
        net.divideMode = 'sample';  % Divide up every sample
        net.divideParam.trainRatio = 50/100;
        net.divideParam.valRatio = 0/100;
        net.divideParam.testRatio = 50/100;
        [net,tr] = train(net,x,t);

        testMatrix = [];
        ensembleMatrix = zeros(350,ensemblesize);
        b = [];
        clfAccVector = zeros(1,ensemblesize);

        for i = 1:ensemblesize
            %configure network to initialse random weights
            %net = init(net);
            net = setwb(net,rand(size(getwb(net),1),size(getwb(net),2)));

            %uncomment to check if input weights change
            %Rw1 = net.IW{1};%input weights
            %display(Rw1);

            % Train the Network
            net = train(net,x,t);

            %Test the network
            y = net(x);

            %cacluating classification error for traiing and test data

            %for test classification error  
            tTest = vec2ind(t);
            tTest = tTest(tr.testInd);
            yTest = vec2ind(y);
            yTest = yTest(tr.testInd);
            tsPercentErrors = sum(tTest ~= yTest)/numel(tTest);

            b = yTest';
            ensembleMatrix(:,i) = b;

            %code for accuracy score on each classifier 
            clfAccuray = 1 -tsPercentErrors;
            clfAccVector(i) = clfAccuray;
            clfAccMatrix(clfAccMatrixInd) = clfAccuray;
            clfAccMatrixInd = clfAccMatrixInd + 1;

        end


        %gives the accuracy socre for each classifier to avg later


        %code for majority vote
        %Final_decision = zeros(length(test_rows),1);
        Final_decision = zeros(length(tTest),1);
        all_results = [1,2]; %possible outcomes
        for row = 1:length(tTest)
            election_array = zeros(1,2); 
            for col = 1:ensemblesize % for different classifiers
               election_array(ensembleMatrix(row,col)) = ... 
                   election_array(ensembleMatrix(row,col)) + 1;
            end 
            [~,I] = max(election_array);
            Final_decision(row) = all_results(I);

        end
        Final_decision = Final_decision';
        ensemblePercentErrors = sum(tTest ~= Final_decision)/numel(tTest);
        ensembleAcc = 1 - ensemblePercentErrors;
        ensembleAccVector(a) = ensembleAcc;
        a = a + 1;

    end 

    %vector of average accuracy for all clf
    clfAvgAccuray = mean(clfAccMatrix);


    % average Majority vote classification accuracy over 30 iterations
    AvgEnsembleAcc = mean(ensembleAccVector);

    %assign Accuracy
    %
    if ensemblesize == 3

        single3Acc = clfAvgAccuray;
        ensemble3Acc = AvgEnsembleAcc;


    elseif ensemblesize == 5

        single5Acc = clfAvgAccuray;    
        ensemble5Acc = AvgEnsembleAcc;

    elseif ensemblesize == 7

        single7Acc = clfAvgAccuray;    
        ensemble7Acc = AvgEnsembleAcc;

    elseif ensemblesize == 9

        single9Acc = clfAvgAccuray;    
        ensemble9Acc = AvgEnsembleAcc;

    elseif ensemblesize == 11

        single11Acc = clfAvgAccuray;    
        ensemble11Acc = AvgEnsembleAcc;

    elseif ensemblesize == 13

        single13Acc = clfAvgAccuray;    
        ensemble13Acc = AvgEnsembleAcc;

    elseif ensemblesize == 15

        single15Acc = clfAvgAccuray;    
        ensemble15Acc = AvgEnsembleAcc;

    elseif ensemblesize == 17

        single17Acc = clfAvgAccuray;    
        ensemble17Acc = AvgEnsembleAcc;

    elseif ensemblesize == 19

        single19Acc = clfAvgAccuray;    
        ensemble19Acc = AvgEnsembleAcc;

    elseif ensemblesize == 21

        single21Acc = clfAvgAccuray;    
        ensemble21Acc = AvgEnsembleAcc;

    elseif ensemblesize == 23

        single23Acc = clfAvgAccuray;    
        ensemble23Acc = AvgEnsembleAcc;

    elseif ensemblesize == 25

        single25Acc = clfAvgAccuray;    
        ensemble25Acc = AvgEnsembleAcc;

    end
end


%} 
%plot 
%
%node 32 error

x = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25];

singlePlot = [single3Acc, single5Acc, single7Acc, single9Acc, ...
    single11Acc, single13Acc, single15Acc, single17Acc, single19Acc, ...
    single21Acc, single23Acc, single25Acc];
ensembleplot = [ensemble3Acc, ensemble5Acc, ensemble7Acc, ensemble9Acc, ...
    ensemble11Acc, ensemble13Acc, ensemble15Acc, ensemble17Acc, ...
    ensemble19Acc, ensemble21Acc, ensemble23Acc, ensemble25Acc];

GraphPlot = [singlePlot; ensembleplot];
GraphPlot = GraphPlot';

hb = bar(x, GraphPlot, 'grouped');  
ylim([0.850 0.950])


%}

