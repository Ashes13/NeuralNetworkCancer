Code for Experiment 1
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 02-May-2020 15:32:10
%
% This script assumes these variables are defined:
%
%   cancerInputs - input data.
%   cancerTargets - target data.
%
[inputs,targets] = cancer_dataset;

x = inputs;
t = targets;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% change and iterate thorugh runs with hidden laye sizes of 2, 8 and 32 
node = 8;
%choose and iterate through runs of ecpochs with  [ 4, 8, 16, 32, 64]
epoch = 64; 

if node == 2
    
    if epoch == 4
        n2e4Test = [];
        n2e4Train = [];
        n2e4Trstd = [];
        n2e4Tsstd = [];
    elseif epoch == 8
        n2e8Test = [];
        n2e8Train = [];
        n2e8Trstd = [];
        n2e8Tsstd = [];

    elseif epoch == 16
        n2e16Test = [];
        n2e16Train = [];
        n2e16Trstd = [];
        n2e16Tsstd = [];
    elseif epoch == 32
        n2e32Test = [];
        n2e32Train = [];
        n2e32Trstd = [];
        n2e32Tsstd = [];
    elseif epoch == 64
        n2e64Test = [];
        n2e64Train = [];
        n2e64Trstd = [];
        n2e64Tsstd = [];
    
    end
    
elseif node == 8 
    
    if epoch == 4
        n8e4Test = [];
        n8e4Train = [];
        n8e4Trstd = [];
        n8e4Tsstd = [];
    elseif epoch == 8
        n8e8Test = [];
        n8e8Train = [];
        n8e8Trstd = [];
        n8e8Tsstd = [];
    elseif epoch == 16
        n8e16Train = [];
        n8e16Test = [];
        n8e16Trstd = [];
        n8e16Tsstd = [];
    elseif epoch == 32
        n8e32Train = [];
        n8e32Test = [];
        n8e32Trstd = [];
        n8e32Tsstd = [];
    elseif epoch == 64
        n8e64Train = [];      
        n8e64Test = [];
        n8e64Trstd = [];
        n8e64Tsstd = [];
    end
    
elseif node == 32 
    
    if epoch == 4
        n32e4Test = [];
        n32e4Train = [];
        n32e4Trstd = [];
        n32e4std = [];
    elseif epoch == 8
        n32e8Test = [];
        n32e8Train = [];
        n32e8Trstd = [];
        n32e8Tsstd = [];
    elseif epoch == 16
        n32e16Test = [];
        n32e16Train = [];
        n32e16Trstd = [];
        n32e16Tsstd = [];
    elseif epoch == 32
        n32e32Test = [];
        n32e32Train = [];
        n32e32Trstd = [];
        n32e32Tsstd = [];
    elseif epoch == 64
        n32e64Test = [];
        n32e64Train = [];
        n32e64Trstd = [];
        n32e64Tsstd = [];
    end 

end
        
    
    
    

a = 0;
TrainError = [];
TestError = [];



while a < 30
    
    % Create a Pattern Recognition Network
    % change hidden layer size to 2, 8 and 32 
    hiddenLayerSize = node;

    net = patternnet(hiddenLayerSize, trainFcn);

    % Setup Division of Data for Training, Validation, Testing
    % For a list of all data division functions type: help nndivision
    net.divideFcn = 'dividerand';  % Divide data randomly
    net.divideMode = 'sample';  % Divide up every sample
    net.divideParam.trainRatio = 50/100;
    net.divideParam.valRatio = 0/100;
    net.divideParam.testRatio = 50/100;

    % Change maximum epochs below for node/epoch combination
    net.trainParam.epochs = epoch;

    % Choose Input and Output Pre/Post-Processing Functions
    % For a list of all processing functions type: help nnprocess
    net.input.processFcns = {'removeconstantrows','mapminmax'};

    % Choose a Performance Function
    % For a list of all performance functions type: help nnperformance
    net.performFcn = 'crossentropy';  % Cross-Entropy

    
    net = init(net);
    % Train the Network
    [net,tr] = train(net,x,t);
    
    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y);
    tind = vec2ind(t);
    yind = vec2ind(y);
    percentErrors = sum(tind ~= yind)/numel(tind);

    % Recalculate Training, Validation and Test Performance
    trainTargets = t .* tr.trainMask{1};
    valTargets = t .* tr.valMask{1};
    testTargets = t .* tr.testMask{1};
    trainPerformance = perform(net,trainTargets,y);
    %valPerformance = perform(net,valTargets,y)
    testPerformance = perform(net,testTargets,y);

    %cacluating classification error for traiing and test data

    %for train classification error  
    tTrain = vec2ind(t);
    tTrain = tTrain(tr.trainInd);
    yTrain = vec2ind(y);
    yTrain = yTrain(tr.trainInd);

    trPercentErrors = sum(tTrain ~= yTrain)/numel(tTrain);

    %for test classification error  
    tTest = vec2ind(t);
    tTest = tTest(tr.testInd);
    yTest = vec2ind(y);
    yTest = yTest(tr.testInd);
    tsPercentErrors = sum(tTest ~= yTest)/numel(tTest);
    % View the Network
    %view(net)

    
    TrainError = [TrainError, trPercentErrors];
    TestError = [TestError, tsPercentErrors ];

    a = a + 1;
end

TrainAv = mean(TrainError);
TestAv = mean(TestError);

TrainSd = std(TrainError);
TestSd = std(TestError);

%set varaibles for graphs
if node == 2
    
    if epoch == 4
        n2e4Test = TestAv;
        n2e4Train = TrainAv;
        n2e4Trstd = TrainSd;
        n2e4Tsstd = TestSd;
    elseif epoch == 8
        n2e8Test = TestAv;
        n2e8Train = TrainAv;
        n2e8Trstd = TrainSd;
        n2e8Tsstd = TestSd;

    elseif epoch == 16
        n2e16Test = TestAv;
        n2e16Train = TrainAv;
        n2e16Trstd = TrainSd;
        n2e16Tsstd = TestSd;
    elseif epoch == 32
        n2e32Test = TestAv;
        n2e32Train = TrainAv;
        n2e32Trstd = TrainSd;
        n2e32Tsstd = TestSd;
    elseif epoch == 64
        n2e64Test = TestAv;
        n2e64Train = TrainAv;
        n2e64Trstd = TrainSd;
        n2e64Tsstd = TestSd;
    
    end
    
elseif node == 8 
    
    if epoch == 4
        n8e4Test = TestAv;
        n8e4Train = TrainAv;
        n8e4Trstd = TrainSd;
        n8e4Tsstd = TestSd;
    elseif epoch == 8
        n8e8Test = TestAv;
        n8e8Train = TrainAv;
        n8e8Trstd = TrainSd;
        n8e8Tsstd = TestSd;
    elseif epoch == 16
        n8e16Train = TrainAv;
        n8e16Test = TestAv;
        n8e16Trstd = TrainSd;
        n8e16Tsstd = TestSd;
    elseif epoch == 32
        n8e32Train = TrainAv;
        n8e32Test = TestAv;
        n8e32Trstd = TrainSd;
        n8e32Tsstd = TestSd;
    elseif epoch == 64
        n8e64Train = TrainAv;      
        n8e64Test = TestAv;
        n8e64Trstd = TrainSd;
        n8e64Tsstd = TestSd;
    end
    
elseif node == 32 
    
    if epoch == 4
        n32e4Test = TestAv;
        n32e4Train = TrainAv;
        n32e4Trstd = TrainSd;
        n32e4Tsstd = TestSd;
    elseif epoch == 8
        n32e8Test = TestAv;
        n32e8Train = TrainAv;
        n32e8Trstd = TrainSd;
        n32e8Tsstd = TestSd;
    elseif epoch == 16
        n32e16Test = TestAv;
        n32e16Train = TrainAv;
        n32e16Trstd = TrainSd;
        n32e16Tsstd = TestSd;
    elseif epoch == 32
        n32e32Test = TestAv;
        n32e32Train = TrainAv;
        n32e32Trstd = TrainSd;
        n32e32Tsstd = TestSd;
    elseif epoch == 64
        n32e64Test = TestAv;
        n32e64Train = TrainAv;
        n32e64Trstd = TrainSd;
        n32e64Tsstd = TestSd;
    end 

end

%}
x = [4, 8 ,16 ,32 ,64];
%{
These next commented sections are for plots, only uncomment this section
after all epoch combinations are run, otherwise script wont excecute 
also comment out only one section for each run otherwise legends mess up.
%}

%{
%code for Test Plot

node2Testplot = [n2e4Test, n2e8Test, n2e16Test, n2e32Test, n2e64Test];
node8Testplot = [n8e4Test, n8e8Test, n8e16Test, n8e32Test, n8e64Test];
node32Testplot = [n32e4Test, n32e8Test, n32e16Test, n32e32Test, n32e64Test];

allnodeTest = [node2Testplot; node8Testplot; node32Testplot];


for i = 1:size(allnodeTest, 1)
    
    plot(x,allnodeTest(i,:))
    
    hold on
    legend("node 2", "node 8", "node32")
    title("classification error rate on Test")
    xlabel("epochs")
    
    ylabel("Classification Error rate")
end
%}


%{
%code for Train Plot

node2Trainplot = [n2e4Train, n2e8Train, n2e16Train, n2e32Train, n2e64Train];
node8Trainplot = [n8e4Train, n8e8Train, n8e16Train, n8e32Train, n8e64Train];
node32Trainplot = [n32e4Train, n32e8Train, n32e16Train, n32e32Train, n32e64Train];

allnodeTrain = [node2Trainplot; node8Trainplot; node32Trainplot];


for i = 1:size(allnodeTrain, 1)
    
    plot(x,allnodeTrain(i,:))
    
    hold on
    title("classification error on Train")
    xlabel('epochs')
    
    ylabel('Classification Error rate')

    legend("node 2", "node 8", "node32")
end
%}

%{
%code for Train Std Plot

node2Trstdplot = [n2e4Trstd, n2e8Trstd, n2e16Trstd, n2e32Trstd, n2e64Trstd];
node8Trstdplot = [n8e4Trstd, n8e8Trstd, n8e16Trstd, n8e32Trstd, n8e64Trstd];
node32Trstdplot = [n32e4Trstd, n32e8Trstd, n32e16Trstd, n32e32Trstd, n32e64Trstd];

allnodeTrstd = [node2Trstdplot; node8Trstdplot; node32Trstdplot];


for i = 1:size(allnodeTrstd, 1)
    
    plot(x,allnodeTrain(i,:))
    
    hold on
    title("Standard deviation of classification error rate on Train")
    xlabel('epochs')
    
    ylabel('Standard deviation')

    legend("node 2", "node 8", "node32")
end

%}

%{
%code for Test Std Plot



node2Tsstdplot = [n2e4Tsstd, n2e8Tsstd, n2e16Tsstd, n2e32Tsstd, n2e64Tsstd];
node8Tsstdplot = [n8e4Tsstd, n8e8Tsstd, n8e16Tsstd, n8e32Tsstd, n8e64Tsstd];
node32Tsstdplot = [n32e4Tsstd, n32e8Tsstd, n32e16Tsstd, n32e32Tsstd, n32e64Tsstd];

allnodeTsstd = [node2Tsstdplot; node8Tsstdplot; node32Tsstdplot];


for i = 1:size(allnodeTsstd, 1)
    
    plot(x,allnodeTsstd(i,:))
    
    hold on
    title("Standard deviation of classification error rate on Test")
    xlabel('epochs')
    
    ylabel('Standard deviation')

    legend("node 2", "node 8", "node32")
end


%}
%{
%node 2 error
node2Trainplot = [n2e4Train, n2e8Train, n2e16Train, n2e32Train, n2e64Train];
node2Testplot = [n2e4Test, n2e8Test, n2e16Test, n2e32Test, n2e64Test];

node2 = [node2Trainplot; node2Testplot];

for i = 1:size(node2, 1)
    
    plot(x,node2(i,:))
    
    hold on
    title("Classification error rate  of Node 2")
    xlabel('epochs')
    
    ylabel('Classification Error rate ')

    legend("Train", "Test")
end

%}


%
%node 8 error
node8Trainplot = [n8e4Train, n8e8Train, n8e16Train, n8e32Train, n8e64Train];
node8Testplot = [n8e4Test, n8e8Test, n8e16Test, n8e32Test, n8e64Test];

node8 = [node8Trainplot; node8Testplot];

for i = 1:size(node8, 1)
    
    plot(x,node8(i,:))
    
    hold on
    title("Classification error of Node 8")
    xlabel('epochs')
    
    ylabel('Classification Error rate ')

    legend("Train", "Test")
end

%}


%{
%node 32 error
node32Trainplot = [n32e4Train, n32e8Train, n32e16Train, n32e32Train, n32e64Train];
node32Testplot = [n32e4Test, n32e8Test, n32e16Test, n32e32Test, n32e64Test];

node32 = [node32Trainplot; node32Testplot];

for i = 1:size(node32, 1)
    
    plot(x,node32(i,:))
    
    hold on
    title("Classification error rate of Node 32")
    xlabel('epochs')
    
    ylabel('Classification Error rate ')

    legend("Train", "Test")
end

%}
